#!/bin/bash

set -e

enforce_pip_package_version()
{
	package=$1
	version=$2
	installed_version=$( pip show "${package}" | grep ^Version | cut -d" " -f2 )
	if [ "${installed_version}" != "${version}" ]
	then
		echo "Wrong version of $package installed, trying to install version $version"
		pip install ${package}==${version}
	fi
}

upgrade_pip_package ()
{
    package=$1
    minversion=$2
    installed_version=`pip freeze|grep -i "${package}=="|cut -d "=" -f3`
    if [ "x" == "x${installed_version}" ]
    then
        # no version installed
        echo "no version of $package installed => installing"
        pip install ${package}==${minversion}
    else
        #instaled
        if [ "x${minversion}" != "x${installed_version}" ]
        then
            echo "version in not the same checking upgrade $package"
            installed_major=`echo "${installed_version}" | cut -d '.' -f 1`
            requested_major=`echo "${minversion}" | cut -d '.' -f 1`
            if [ "$installed_major" -gt "$requested_major" ]
            then
                echo "already installed newer version of ${package}. Keeping version:${installed_version}"
                return
            fi
            if [ "$installed_major" == "${requested_major}" ]
            then
                # stejna major - otestuj minor
                installed_minor=`echo "${installed_version}" | cut -d '.' -f 2`
                requested_minor=`echo "${minversion}" | cut -d '.' -f 2`
                if [ "$installed_minor" -gt "$requested_minor" ]
                then
                    echo "already installed newer version of ${package}. Keeping version:${installed_version}"
                    return
                fi
                if [ "$installed_minor" == "${requested_minor}" ]
                then
                    # stejna minor - otestuj build
                    installed_build=`echo "${installed_version}" | cut -d '.' -f 3`
                    requested_build=`echo "${minversion}" | cut -d '.' -f 3`
                    if [ "$installed_build" -gt "$requested_build" ]
                    then
                        echo "already installed newer version of ${package}. Keeping version:${installed_version}"
                        return
                    fi
                    # tady neni potreba kontrolovat stejnou verzi protoze
                    # to uz je vyloucene driv
                fi  # minor ==
            fi  # major ==
            echo "installed ${installed_version} version => gonn upgrade to ${minversion}"
            pip uninstall -y ${package}
            pip install --upgrade ${package}==${minversion}
        else
            echo "version is the same - not upgrading $package"
        fi
    fi
}

pip install -U pip

upgrade_pip_package uWSGI 2.0.13
